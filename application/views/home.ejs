<%- include('partials/_head'); %>

<style>
  #uploadForm {
    display: contents;
  }

  body {
    margin: 0;
    font-family: 'Open Sans', sans-serif;
    background-color: #000;
    color: #fff;
  }

  .header-banner {
    background: url('/assets/backgrounds/header-bg.png') no-repeat center center;
    background-size: cover;
    min-height: 220px;
    display: flex;
    flex-direction: column;
    justify-content: center; 
    align-items: center;   
    text-align: center;
    padding: 2rem;
    position: relative;
  }

  .header-text {
    position: relative;
    z-index: 1;
  }

  .header-text h1 {
    font-family: 'Montserrat', sans-serif;
    font-size: 2.5rem;
    font-weight: 700;
    color: white;
    margin: 0 0 0.5rem 0;
  }

  .header-text h1 span {
    color: #e50914;
  }

  .header-text .slogan {
    font-family: 'Open Sans', sans-serif;
    font-size: 0.8rem;
    font-weight: 600;
    color: #fff;
    margin: 0;
  }

  .main-container {
    max-width: 800px;
    margin: 2rem auto;
    padding: 1rem;
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
  }

    .step-card {
    display: flex;
    flex-direction: row;
    background-color: #1B1C1C;
    border-radius: 10px;
    padding: 1.5rem;
    box-shadow: 0 2px 10px rgba(0,0,0,0.5);
    min-height: 200px;
    }

    .step-card-two {
    display: flex;
    flex-direction: row;
    background-color: #1B1C1C;
    border-radius: 10px;
    padding: 1.5rem;
    box-shadow: 0 2px 10px rgba(0,0,0,0.5);
    min-height: 120px;
    }

  .step-content {
    flex: 1;
    margin-right: 1rem;
  }

  .step-content input[disabled],
  .step-content button[disabled] {
    opacity: 0.5;
    cursor: not-allowed;
  }


  .step-content h2 {
    font-size: 1rem;
    font-weight: bold;
    margin-bottom: 0.5rem;
    word-wrap: break-word;
  }

  .step-content p {
    font-size: 0.85rem;
    color: #aaa;
    margin-bottom: 0.5rem;
  }

  .step-content button,
  .step-content input[type="date"] {
    background-color: #4F4F4F;
    color: #fff;
    border: none;
    padding: 0.4rem 0.8rem;
    border-radius: 5px;
    font-size: 0.85rem;
    cursor: pointer;
    margin-right: 0.5rem;
    display: inline-flex;
    align-items: center;
    gap: 5px;
  }

  .step-content input[type="date"] {
    font-family: 'Open Sans', sans-serif;
  }

  .step-content input[type="text"] {
    background-color: #4F4F4F;
    color: #fff;
    border: none;
    padding: 0.4rem 0.8rem;
    border-radius: 5px;
    font-size: 0.85rem;
    font-family: 'Open Sans', sans-serif;
    width: 100%;
    max-width: 300px;
  }

  .step-img {
    width: 50%;
    height: auto;
    min-height: 200px;
    background-size: cover;
    background-position: center;
    border-radius: 8px;
  }

    .upload-row {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    margin-top: 0.5rem;
  }

  .file-display {
    display: none;
    font-size: 0.85rem;
    color: #ccc;
    display: flex;
    align-items: center;
    gap: 5px;
  }

  .file-display img {
    width: 16px;
    height: 16px;
  }

  footer {
    margin-top: 4rem;
    padding: 2rem;
    text-align: center;
    font-size: 0.75rem;
    color: #666;
  }
</style>

<div class="header-banner">
  <div class="header-text">
    <h1><span>NETFLIX</span> Wrapped</h1>
    <p class="slogan">Discover your Netflix habits with custom timeframes and rich visual insights.</p>
  </div>
</div>

<div class="main-container">
  <!-- Step 1 -->
  <div class="step-card">
    <div class="step-content">
      <h2>1. Download data from Netflix</h2>
      <p>You must log into Netflix and request to download your history. You should recieve a zip file via email. (You might have to wait for Netflix to process your request).</p>
      <button onclick="window.open('https://www.netflix.com/account/getmyinfo', '_blank')">
        Netflix View Activity
        <img src="/Assets/icons/linkTo.svg" width="16" alt="Download" />
      </button>
    </div>
    <div class="step-img" style="background-image: url('/Assets/step1.png');"></div>
  </div>

<form id="uploadForm" action="/upload" method="POST" enctype="multipart/form-data">
  <!-- Step 2 -->
  <div class="step-card">
    <div class="step-content">
      <h2>2. Upload CSV</h2>
      <p> Unpack the zip file you receieved. Choose the file <br>CONTENT_INTERACTION/ViewingActivity.csv</p>
      <form id="uploadForm" action="/upload" method="POST" enctype="multipart/form-data">
      <input type="file" id="fileInput" name="netflixData" style="display: none;" required />
      <div class="upload-row">
        <button type="button" id="uploadBtn">
          <img src="/assets/icons/upload.svg" width="16" alt="Upload" /> Upload CSV
        </button>
        <span id="fileDisplay" class="file-display" style="display: none;"></span>
      </div>
    </div>
    <div class="step-img" style="background-image: url('/Assets/step2.png');"></div>
  </div>

  <!-- Step 3 -->
  <div class="step-card-two">
    <div class="step-content">
      <h2>3. Choose timespan</h2>
      <p>Select a date range for your wrapped summary.
      </p>
      <input type="date" name="startDate" id="startDate" required disabled />
      <input type="date" name="endDate" id="endDate" required disabled />
    </div>
  </div>

  <!-- Step 4 -->
  <div class="step-card-two">
    <div class="step-content">
      <h2>4. Choose profile</h2>
      <p>Select the profile to generate the report for.</p>
      <select name="username" id="username" required disabled>
        <option value="" disabled selected>Select profile</option>
      </select>
    </div>
  </div>


  <!-- Step 5 -->
  <div class="step-card-two">
    <div class="step-content">
      <h2>5. Generate report</h2>
      <p>Click the button below to generate your Netflix Wrapped!</p>
      <button id="generateBtn" onclick="generateReport()" disabled>
        <img src="/Assets/icons/generate.svg" width="16" alt="Generate" /> Generate Report
      </button>
    </div>
  </div>

  <!-- <form action="/upload" method="post" enctype="multipart/form-data">
    <input type="file" name="netflixData" id="netflixData" required>
    <input type="date" name="startDate" id="startDate" required><input type="date" name="endDate" id="endDate" required>
    <input type="text" name="username" required>
    <input type="submit" value="Submit">
  </form> -->

<footer>
  Made by WUST students for SSD project. Not affiliated with Netflix.
</footer>

<script>
  let tempFile = null;

  const fileInput = document.getElementById('fileInput');
  const uploadBtn = document.getElementById('uploadBtn');
  const fileDisplay = document.getElementById('fileDisplay');

  uploadBtn.addEventListener('click', () => {
    fileInput.click();
  });

  fileInput.addEventListener('change', () => {
    document.getElementById('startDate').disabled = false;
    document.getElementById('endDate').disabled = false;
    document.getElementById('username').disabled = false;
    document.getElementById('generateBtn').disabled = false;

    // Set default range: last year
    const today = new Date();
    const oneYearAgo = new Date();
    oneYearAgo.setFullYear(today.getFullYear() - 1);

    startDateInput.value = oneYearAgo.toISOString().split('T')[0];
    endDateInput.value = today.toISOString().split('T')[0];

    // Update min/max bounds
    startDateInput.min = minDateStr;
    startDateInput.max = todayStr;
    endDateInput.min = startDateInput.value;
    endDateInput.max = todayStr;

    const file = fileInput.files[0];

    if (!file || !file.name.toLowerCase().endsWith('.csv')) {
    alert('Please upload a valid CSV file.');
    fileInput.value = ''; // clear input
    tempFile = null;
    fileDisplay.style.display = 'none';
    return;
    }
    
    tempFile = file;

    fileDisplay.innerHTML = `
      <img src="/assets/icons/generate.svg" width="16" alt="CSV Icon" />
      <span>${file.name}</span>
    `;
    fileDisplay.style.display = 'flex';

      const reader = new FileReader();
  reader.onload = function (event) {
    const lines = event.target.result.split('\n');
    const headers = lines[0].split(',');

    const profileIndex = headers.findIndex(h => h.trim().toLowerCase() === 'profile name');
    const profiles = new Set();

    for (let i = 1; i < lines.length; i++) {
      const row = lines[i].split(',');
      if (row.length <= profileIndex) continue;
      const name = row[profileIndex].trim();
      if (name) profiles.add(name);
    }

    const dropdown = document.getElementById('username');
    dropdown.innerHTML = '<option value="" disabled selected>Select profile</option>';
    [...profiles].forEach(profile => {
      const opt = document.createElement('option');
      opt.value = profile;
      opt.textContent = profile;
      dropdown.appendChild(opt);
    });
  };

  reader.readAsText(fileInput.files[0]);
  });

async function generateReport() {
  if (!tempFile) {
    alert('Please upload a CSV file first.');
    return;
  }

  // Set the file input manually with the tempFile
  const dataTransfer = new DataTransfer();
  dataTransfer.items.add(tempFile);
  fileInput.files = dataTransfer.files;

  // Submit the form programmatically
  document.getElementById('uploadForm').submit();
}

</script>

<script>
  const startDateInput = document.getElementById('startDate');
  const endDateInput = document.getElementById('endDate');

  const today = new Date();
  const todayStr = today.toISOString().split('T')[0];

  const minDate = new Date();
  minDate.setFullYear(minDate.getFullYear() - 8);
  const minDateStr = minDate.toISOString().split('T')[0];

  // Set default min/max attributes
  startDateInput.min = minDateStr;
  startDateInput.max = todayStr;
  endDateInput.min = minDateStr;
  endDateInput.max = todayStr;

  // Validate when either input changes
  startDateInput.addEventListener('change', () => {
    if (startDateInput.value > todayStr) {
      alert("Start date cannot be in the future.");
      startDateInput.value = '';
      return;
    }

    if (endDateInput.value && endDateInput.value < startDateInput.value) {
      alert("End date cannot be earlier than start date.");
      endDateInput.value = '';
    }

    // Ensure endDate can't be before startDate
    endDateInput.min = startDateInput.value;
  });

  endDateInput.addEventListener('change', () => {
    if (endDateInput.value > todayStr) {
      alert("End date cannot be in the future.");
      endDateInput.value = '';
      return;
    }

    if (startDateInput.value && endDateInput.value < startDateInput.value) {
      alert("End date cannot be earlier than start date.");
      endDateInput.value = '';
    }
  });
</script>


<%- include('partials/_footer'); %>
